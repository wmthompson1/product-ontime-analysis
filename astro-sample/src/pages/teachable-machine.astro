---
import Layout from '../layouts/Layout.astro';
import TeachableMachineDemo from '../components/TeachableMachineDemo.jsx';
---

<Layout title="Teachable Machine Concept - Framework Demo">
  <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">
        The Teachable Machine Approach to JavaScript Frameworks
      </h1>
      <p class="text-xl text-gray-600 max-w-4xl mx-auto">
        Just as Google's Teachable Machine democratizes AI by making it accessible without deep technical knowledge, 
        modern JavaScript frameworks democratize web development by abstracting complexity.
      </p>
    </div>

    <!-- Concept Explanation -->
    <div class="grid lg:grid-cols-2 gap-12 mb-16">
      
      <!-- Left: Traditional Approach -->
      <div class="bg-red-50 rounded-xl p-8">
        <h2 class="text-2xl font-bold text-red-800 mb-6">Traditional Approach (Complex)</h2>
        
        <div class="space-y-6">
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-red-700 mb-2">Manual DOM Manipulation</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              document.getElementById('button').addEventListener('click', ...)
            </code>
          </div>
          
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-red-700 mb-2">State Management Chaos</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              let userCount = 0; // Global state everywhere
            </code>
          </div>
          
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-red-700 mb-2">Manual API Handling</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              fetch().then().catch() // Error handling everywhere
            </code>
          </div>
        </div>
        
        <div class="mt-6 p-4 bg-red-100 rounded-lg">
          <p class="text-red-800 font-medium">Result: Complex, error-prone, hard to maintain</p>
        </div>
      </div>

      <!-- Right: Framework Approach -->
      <div class="bg-green-50 rounded-xl p-8">
        <h2 class="text-2xl font-bold text-green-800 mb-6">Framework Approach (Simple)</h2>
        
        <div class="space-y-6">
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-green-700 mb-2">Declarative Components</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              &lt;Button onClick={handleClick}&gt;Click me&lt;/Button&gt;
            </code>
          </div>
          
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-green-700 mb-2">Automatic State Management</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              const [count, setCount] = useState(0)
            </code>
          </div>
          
          <div class="bg-white rounded-lg p-4 shadow-sm">
            <h3 class="font-semibold text-green-700 mb-2">Built-in API Integration</h3>
            <code class="text-sm text-gray-600 block bg-gray-100 p-2 rounded">
              const {data, error} = await fetch('/api/users')
            </code>
          </div>
        </div>
        
        <div class="mt-6 p-4 bg-green-100 rounded-lg">
          <p class="text-green-800 font-medium">Result: Clean, maintainable, focus on features</p>
        </div>
      </div>
    </div>

    <!-- Interactive Demo -->
    <div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-8 mb-16">
      <h2 class="text-3xl font-bold text-center mb-8">Interactive Framework Demo</h2>
      <p class="text-center text-gray-600 mb-8">
        This React component demonstrates how frameworks make complex interactions simple.
        Notice how the component manages its own state and updates automatically.
      </p>
      
      <!-- React Component (Island Architecture) -->
      <div class="max-w-2xl mx-auto">
        <TeachableMachineDemo client:load />
      </div>
    </div>

    <!-- Framework Benefits -->
    <div class="grid md:grid-cols-3 gap-8 mb-16">
      
      <div class="text-center">
        <div class="w-16 h-16 bg-blue-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span class="text-2xl">ðŸŽ¯</span>
        </div>
        <h3 class="text-xl font-semibold mb-3">Focus on Logic</h3>
        <p class="text-gray-600">
          Like Teachable Machine, frameworks handle the complex underlying processes 
          so you can focus on your application's unique features.
        </p>
      </div>

      <div class="text-center">
        <div class="w-16 h-16 bg-green-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span class="text-2xl">ðŸ”„</span>
        </div>
        <h3 class="text-xl font-semibold mb-3">Automatic Updates</h3>
        <p class="text-gray-600">
          Frameworks automatically update the UI when data changes, 
          just like how Teachable Machine automatically improves with more training data.
        </p>
      </div>

      <div class="text-center">
        <div class="w-16 h-16 bg-purple-100 rounded-full flex items-center justify-center mx-auto mb-4">
          <span class="text-2xl">ðŸ§©</span>
        </div>
        <h3 class="text-xl font-semibold mb-3">Reusable Components</h3>
        <p class="text-gray-600">
          Build once, use everywhere. Like trained models in Teachable Machine, 
          components can be reused across different parts of your application.
        </p>
      </div>

    </div>

    <!-- Code Comparison -->
    <div class="bg-white rounded-xl shadow-lg p-8">
      <h2 class="text-2xl font-bold text-center mb-8">Code Comparison: Before vs After</h2>
      
      <div class="grid lg:grid-cols-2 gap-8">
        
        <!-- Before: Vanilla JavaScript -->
        <div>
          <h3 class="text-lg font-semibold mb-4 text-red-600">Vanilla JavaScript (Complex)</h3>
          <pre class="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm"><code>// 50+ lines of complex code
const button = document.getElementById('btn');
const counter = document.getElementById('count');
let count = 0;

button.addEventListener('click', () => {
  count++;
  counter.textContent = count;
  
  // Update other elements
  updateUserList();
  updateStats();
  saveToLocalStorage();
  
  // Handle errors
  try {
    sendToAPI(count);
  } catch (error) {
    showErrorMessage(error);
  }
});

function updateUserList() {
  // More complex DOM manipulation...
}

function updateStats() {
  // More state management...
}

// ... 30+ more lines of boilerplate</code></pre>
        </div>

        <!-- After: Framework -->
        <div>
          <h3 class="text-lg font-semibold mb-4 text-green-600">With Framework (Simple)</h3>
          <pre class="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm"><code>// 5 lines of focused code
function Counter() {
  const [count, setCount] = useState(0);
  
  return (
    &lt;div&gt;
      &lt;button onClick={() => setCount(count + 1)}&gt;
        Count: {count}
      &lt;/button&gt;
    &lt;/div&gt;
  );
}

// Framework handles:
// âœ“ DOM updates
// âœ“ State management  
// âœ“ Event handling
// âœ“ Error boundaries
// âœ“ Performance optimization</code></pre>
        </div>

      </div>
    </div>

  </div>
</Layout>