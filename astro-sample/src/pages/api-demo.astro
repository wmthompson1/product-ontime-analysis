---
import Layout from '../layouts/Layout.astro';

// Server-side data fetching (SSR)
let flaskData = null;
let connectionError = null;

try {
  // Try to fetch data from Flask API during build/request
  const response = await fetch('http://localhost:5000/api/health');
  if (response.ok) {
    flaskData = await response.json();
  } else {
    throw new Error(`Flask API returned ${response.status}`);
  }
} catch (error) {
  connectionError = error.message;
}
---

<Layout title="API Demo - Server-Side Integration">
  <div class="max-w-7xl mx-auto py-12 px-4 sm:px-6 lg:px-8">
    
    <!-- Header -->
    <div class="text-center mb-12">
      <h1 class="text-4xl font-bold text-gray-900 mb-4">
        API Integration Demo
      </h1>
      <p class="text-xl text-gray-600 max-w-4xl mx-auto">
        Demonstrating both server-side (SSR) and client-side API integration patterns 
        with your Flask backend, showcasing the flexibility of modern web architecture.
      </p>
    </div>

    <!-- Server-Side Data Section -->
    <div class="bg-white rounded-xl shadow-lg p-8 mb-16">
      <h2 class="text-2xl font-bold mb-6">Server-Side Rendering (SSR)</h2>
      <p class="text-gray-600 mb-6">
        This data was fetched during page generation on the server, similar to how Flask templates work.
      </p>
      
      {flaskData ? (
        <div class="bg-green-50 border border-green-200 rounded-lg p-6">
          <h3 class="text-lg font-semibold text-green-800 mb-3">‚úÖ Flask Connection Successful</h3>
          <div class="space-y-2 text-sm">
            <div><strong>Status:</strong> <span class="text-green-700">{flaskData.status}</span></div>
            {flaskData.database && <div><strong>Database:</strong> <span class="text-green-700">{flaskData.database}</span></div>}
            {flaskData.timestamp && <div><strong>Timestamp:</strong> <span class="text-green-700">{flaskData.timestamp}</span></div>}
          </div>
          
          <div class="mt-4 p-3 bg-white rounded border">
            <h4 class="font-medium mb-2">Raw API Response:</h4>
            <pre class="text-xs text-gray-600 overflow-x-auto">{JSON.stringify(flaskData, null, 2)}</pre>
          </div>
        </div>
      ) : (
        <div class="bg-yellow-50 border border-yellow-200 rounded-lg p-6">
          <h3 class="text-lg font-semibold text-yellow-800 mb-3">‚ö†Ô∏è Flask Connection Issue</h3>
          <p class="text-yellow-700 mb-3">
            Could not connect to Flask API during server-side rendering.
          </p>
          <div class="text-sm text-yellow-600">
            <strong>Error:</strong> {connectionError}
          </div>
          <div class="mt-3 text-sm text-yellow-600">
            <strong>Solution:</strong> Make sure your Flask app is running on <code class="bg-yellow-100 px-1 rounded">http://localhost:5000</code>
          </div>
        </div>
      )}

      <!-- SSR Code Example -->
      <div class="mt-6">
        <h3 class="text-lg font-semibold mb-3">How SSR Works in Astro</h3>
        <pre class="bg-gray-900 text-green-400 p-4 rounded-lg overflow-x-auto text-sm"><code>---
// This runs on the server during page generation
let flaskData = null;

try {
  const response = await fetch('http://localhost:5000/api/health');
  flaskData = await response.json();
} catch (error) {
  console.error('SSR fetch failed:', error);
}
---

&lt;div&gt;
  {flaskData ? (
    &lt;p&gt;Status: {flaskData.status}&lt;/p&gt;
  ) : (
    &lt;p&gt;Connection failed&lt;/p&gt;
  )}
&lt;/div&gt;</code></pre>
      </div>
    </div>

    <!-- API Patterns Comparison -->
    <div class="grid lg:grid-cols-2 gap-8 mb-16">
      
      <!-- Traditional Flask Pattern -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h3 class="text-xl font-semibold mb-4 text-green-600">Traditional Flask Pattern</h3>
        <div class="space-y-4">
          <div class="p-3 bg-green-50 rounded border-l-4 border-green-400">
            <h4 class="font-medium text-green-800">Server-Side Rendering</h4>
            <p class="text-sm text-green-700 mt-1">
              All logic runs on the server, HTML sent to browser
            </p>
          </div>
          
          <pre class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><code># Traditional Flask route
@app.route('/users')
def users_page():
    users = User.query.all()
    return render_template(
        'users.html', 
        users=users
    )</code></pre>
          
          <div class="text-sm text-gray-600">
            <strong>Pros:</strong> Simple, SEO-friendly, works without JavaScript<br>
            <strong>Cons:</strong> Full page reload for interactions, limited UX
          </div>
        </div>
      </div>

      <!-- Modern Astro + Flask Pattern -->
      <div class="bg-white rounded-lg shadow-lg p-6">
        <h3 class="text-xl font-semibold mb-4 text-purple-600">Modern Astro + Flask Pattern</h3>
        <div class="space-y-4">
          <div class="p-3 bg-purple-50 rounded border-l-4 border-purple-400">
            <h4 class="font-medium text-purple-800">Hybrid Rendering</h4>
            <p class="text-sm text-purple-700 mt-1">
              Static + dynamic content, interactive islands
            </p>
          </div>
          
          <pre class="bg-gray-900 text-green-400 p-3 rounded text-sm overflow-x-auto"><code># Flask API endpoint
@app.route('/api/users')
def api_users():
    users = User.query.all()
    return jsonify([user.to_dict() 
                   for user in users])

// Astro component
&lt;UserList client:load /&gt;</code></pre>
          
          <div class="text-sm text-gray-600">
            <strong>Pros:</strong> Fast loading, interactive, SEO-friendly, scalable<br>
            <strong>Cons:</strong> Slightly more complex setup
          </div>
        </div>
      </div>

    </div>

    <!-- Integration Patterns -->
    <div class="bg-gradient-to-r from-blue-50 to-purple-50 rounded-xl p-8 mb-16">
      <h2 class="text-2xl font-bold text-center mb-8">Integration Patterns</h2>
      
      <div class="grid md:grid-cols-3 gap-6">
        
        <!-- Pattern 1: SSR -->
        <div class="bg-white rounded-lg p-6 shadow">
          <div class="text-center mb-4">
            <div class="w-12 h-12 bg-blue-100 rounded-full flex items-center justify-center mx-auto">
              <span class="text-xl">üèóÔ∏è</span>
            </div>
            <h3 class="font-semibold mt-2">Server-Side Rendering</h3>
          </div>
          <ul class="text-sm text-gray-600 space-y-1">
            <li>‚Ä¢ Data fetched during build/request</li>
            <li>‚Ä¢ Fast initial page load</li>
            <li>‚Ä¢ SEO optimized</li>
            <li>‚Ä¢ Good for static content</li>
          </ul>
        </div>

        <!-- Pattern 2: CSR -->
        <div class="bg-white rounded-lg p-6 shadow">
          <div class="text-center mb-4">
            <div class="w-12 h-12 bg-green-100 rounded-full flex items-center justify-center mx-auto">
              <span class="text-xl">‚ö°</span>
            </div>
            <h3 class="font-semibold mt-2">Client-Side Rendering</h3>
          </div>
          <ul class="text-sm text-gray-600 space-y-1">
            <li>‚Ä¢ Data fetched in browser</li>
            <li>‚Ä¢ Interactive components</li>
            <li>‚Ä¢ Real-time updates</li>
            <li>‚Ä¢ Good for dynamic content</li>
          </ul>
        </div>

        <!-- Pattern 3: Islands -->
        <div class="bg-white rounded-lg p-6 shadow">
          <div class="text-center mb-4">
            <div class="w-12 h-12 bg-purple-100 rounded-full flex items-center justify-center mx-auto">
              <span class="text-xl">üèùÔ∏è</span>
            </div>
            <h3 class="font-semibold mt-2">Islands Architecture</h3>
          </div>
          <ul class="text-sm text-gray-600 space-y-1">
            <li>‚Ä¢ Best of both worlds</li>
            <li>‚Ä¢ Selective hydration</li>
            <li>‚Ä¢ Optimal performance</li>
            <li>‚Ä¢ Astro's specialty</li>
          </ul>
        </div>

      </div>
    </div>

    <!-- Real-World Example -->
    <div class="bg-white rounded-xl shadow-lg p-8 mb-16">
      <h2 class="text-2xl font-bold mb-6">Real-World Implementation Example</h2>
      
      <div class="space-y-6">
        <div>
          <h3 class="text-lg font-semibold mb-3">Scenario: User Dashboard with Semantic Layer</h3>
          <p class="text-gray-600 mb-4">
            Building a dashboard that shows user analytics and allows natural language queries to your database.
          </p>
        </div>

        <div class="grid lg:grid-cols-2 gap-6">
          
          <!-- Astro Frontend -->
          <div class="p-4 bg-purple-50 rounded-lg">
            <h4 class="font-semibold text-purple-800 mb-3">Astro Frontend</h4>
            <pre class="text-xs bg-gray-800 text-green-400 p-3 rounded overflow-x-auto"><code>---
// Dashboard.astro - SSR for initial data
const userStats = await fetch(
  'http://localhost:5000/api/stats'
).then(r => r.json());
---

&lt;Layout&gt;
  &lt;!-- Static dashboard layout --&gt;
  &lt;h1&gt;User Dashboard&lt;/h1&gt;
  
  &lt;!-- SSR stats (fast initial load) --&gt;
  &lt;div&gt;Total Users: {userStats.count}&lt;/div&gt;
  
  &lt;!-- Interactive query interface --&gt;
  &lt;SemanticQueryWidget client:load /&gt;
  
  &lt;!-- Real-time user list --&gt;
  &lt;UserList client:visible /&gt;
&lt;/Layout&gt;</code></pre>
          </div>

          <!-- Flask Backend -->
          <div class="p-4 bg-green-50 rounded-lg">
            <h4 class="font-semibold text-green-800 mb-3">Flask Backend APIs</h4>
            <pre class="text-xs bg-gray-800 text-green-400 p-3 rounded overflow-x-auto"><code># API endpoints for the dashboard
@app.route('/api/stats')
def get_stats():
    return jsonify({
        'count': User.query.count(),
        'active': User.query.filter_by(
            active=True
        ).count()
    })

@app.route('/api/v1/convert', methods=['POST'])
def semantic_query():
    nl_query = request.json['query']
    result = semantic_layer.process_query(
        nl_query
    )
    return jsonify(result)

@app.route('/api/users/realtime')
def realtime_users():
    # WebSocket or Server-Sent Events
    return stream_user_updates()</code></pre>
          </div>

        </div>

        <div class="p-4 bg-blue-50 rounded-lg">
          <h4 class="font-semibold text-blue-800 mb-2">Benefits of This Architecture:</h4>
          <ul class="text-sm text-blue-700 space-y-1">
            <li>‚Ä¢ <strong>Fast initial load:</strong> Critical data loaded server-side</li>
            <li>‚Ä¢ <strong>Progressive enhancement:</strong> Interactive features load as needed</li>
            <li>‚Ä¢ <strong>SEO friendly:</strong> Core content available immediately</li>
            <li>‚Ä¢ <strong>Real-time capable:</strong> WebSocket integration for live updates</li>
            <li>‚Ä¢ <strong>Scalable:</strong> Frontend and backend can scale independently</li>
          </ul>
        </div>
      </div>
    </div>

    <!-- Next Steps -->
    <div class="text-center">
      <h2 class="text-2xl font-bold mb-6">Ready to Build?</h2>
      <p class="text-gray-600 mb-8 max-w-2xl mx-auto">
        You now have a solid understanding of how Astro can enhance your Flask applications. 
        The combination provides the best of both worlds: Python's power and JavaScript's interactivity.
      </p>
      
      <div class="flex justify-center space-x-4">
        <a href="/flask-integration" 
           class="px-6 py-3 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors">
          See More Integration Examples
        </a>
        <a href="/" 
           class="px-6 py-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">
          Back to Overview
        </a>
      </div>
    </div>

  </div>
</Layout>