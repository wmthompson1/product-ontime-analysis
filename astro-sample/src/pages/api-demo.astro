---
import Layout from '../layouts/Layout.astro';
---

<Layout title="API Integration Examples">
        <section class="py-16">
                <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
                        <h2 class="text-3xl font-bold text-center mb-8">Real API Integration Examples</h2>
                        <p class="text-center text-gray-600 mb-12">
                                See how Astro seamlessly integrates with your existing Flask backend through real API calls.
                        </p>

                        <div class="grid lg:grid-cols-2 gap-8">
                                
                                <!-- Server-Side API Call -->
                                <div class="bg-white rounded-lg shadow-lg p-6">
                                        <h3 class="text-xl font-semibold mb-4 text-blue-600">Server-Side Integration</h3>
                                        <p class="text-gray-600 mb-4">Astro can fetch data from your Flask API during build time or server rendering.</p>
                                        
                                        <div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
                                                <pre><code>---
// In your .astro file
const response = await fetch('http://localhost:5000/api/users');
const users = await response.json();
---

<div>
  {users.map(user => (
    <div key={user.id}>
      <h3>{user.name}</h3>
      <p>{user.email}</p>
    </div>
  ))}
</div></code></pre>
                                        </div>
                                        
                                        <div class="mt-4 p-3 bg-blue-50 rounded">
                                                <h4 class="font-semibold text-blue-800">Benefits:</h4>
                                                <ul class="text-sm text-blue-700 mt-1 space-y-1">
                                                        <li>‚Ä¢ Data fetched at build time</li>
                                                        <li>‚Ä¢ No client-side JavaScript needed</li>
                                                        <li>‚Ä¢ Excellent SEO and performance</li>
                                                        <li>‚Ä¢ Works with static hosting</li>
                                                </ul>
                                        </div>
                                </div>

                                <!-- Client-Side API Call -->
                                <div class="bg-white rounded-lg shadow-lg p-6">
                                        <h3 class="text-xl font-semibold mb-4 text-purple-600">Client-Side Integration</h3>
                                        <p class="text-gray-600 mb-4">For dynamic interactions, use React components with your Flask API.</p>
                                        
                                        <div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
                                                <pre><code>// React component for dynamic data
function UserList() {
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  
  const fetchUsers = async () => {
    setLoading(true);
    const response = await fetch('/api/users');
    const data = await response.json();
    setUsers(data);
    setLoading(false);
  };
  
  return (
    <div>
      <button onClick={fetchUsers}>
        {loading ? 'Loading...' : 'Load Users'}
      </button>
      {users.map(user => (
        <UserCard key={user.id} user={user} />
      ))}
    </div>
  );
}</code></pre>
                                        </div>
                                        
                                        <div class="mt-4 p-3 bg-purple-50 rounded">
                                                <h4 class="font-semibold text-purple-800">Benefits:</h4>
                                                <ul class="text-sm text-purple-700 mt-1 space-y-1">
                                                        <li>‚Ä¢ Real-time user interactions</li>
                                                        <li>‚Ä¢ Progressive enhancement</li>
                                                        <li>‚Ä¢ Handles loading and error states</li>
                                                        <li>‚Ä¢ Works with authentication</li>
                                                </ul>
                                        </div>
                                </div>

                        </div>

                        <!-- Integration Patterns -->
                        <div class="mt-12 bg-gradient-to-r from-gray-50 to-blue-50 rounded-xl p-8">
                                <h3 class="text-2xl font-bold text-center mb-8">Common Integration Patterns</h3>
                                
                                <div class="grid md:grid-cols-3 gap-6">
                                        
                                        <!-- Pattern 1 -->
                                        <div class="bg-white rounded-lg p-4 shadow">
                                                <h4 class="font-semibold text-green-600 mb-2">üèóÔ∏è Static + Dynamic</h4>
                                                <p class="text-sm text-gray-600 mb-3">
                                                        Load initial data server-side, add interactivity with islands.
                                                </p>
                                                <div class="text-xs text-gray-500">
                                                        <strong>Best for:</strong> Blogs, documentation, marketing sites with some dynamic features
                                                </div>
                                        </div>

                                        <!-- Pattern 2 -->
                                        <div class="bg-white rounded-lg p-4 shadow">
                                                <h4 class="font-semibold text-blue-600 mb-2">‚ö° Full SPA Mode</h4>
                                                <p class="text-sm text-gray-600 mb-3">
                                                        Use Astro's SPA mode for app-like experiences with Flask API.
                                                </p>
                                                <div class="text-xs text-gray-500">
                                                        <strong>Best for:</strong> Dashboards, admin panels, complex web applications
                                                </div>
                                        </div>

                                        <!-- Pattern 3 -->
                                        <div class="bg-white rounded-lg p-4 shadow">
                                                <h4 class="font-semibold text-purple-600 mb-2">üîÑ Hybrid Approach</h4>
                                                <p class="text-sm text-gray-600 mb-3">
                                                        Mix static pages with dynamic components as needed.
                                                </p>
                                                <div class="text-xs text-gray-500">
                                                        <strong>Best for:</strong> E-commerce, user portals, content management systems
                                                </div>
                                        </div>

                                </div>
                        </div>

                        <!-- Migration Guide -->
                        <div class="mt-12 bg-white rounded-lg shadow-lg p-8">
                                <h3 class="text-2xl font-bold mb-6">Migration from Flask Templates</h3>
                                
                                <div class="grid md:grid-cols-2 gap-8">
                                        <!-- Before -->
                                        <div>
                                                <h4 class="text-lg font-semibold mb-4 text-red-600">Before: Flask Templates</h4>
                                                <div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
                                                        <pre><code># Flask route
@app.route('/users')
def users():
    users = User.query.all()
    return render_template('users.html', users=users)

&lt;!-- users.html --&gt;
{% for user in users %}
  <div class="user-card">
    <h3>{{ user.name }}</h3>
    <p>{{ user.email }}</p>
  </div>
{% endfor %}</code></pre>
                                                </div>
                                        </div>

                                        <!-- After -->
                                        <div>
                                                <h4 class="text-lg font-semibold mb-4 text-green-600">After: Astro + Flask API</h4>
                                                <div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
                                                        <pre><code># Flask API endpoint
@app.route('/api/users')
def api_users():
    users = User.query.all()
    return jsonify([u.to_dict() for u in users])

---
// users.astro
const response = await fetch('http://localhost:5000/api/users');
const users = await response.json();
---

{users.map(user => (
  <div class="user-card">
    <h3>{user.name}</h3>
    <p>{user.email}</p>
  </div>
))}</code></pre>
                                                </div>
                                        </div>
                                </div>

                                <div class="mt-6 p-4 bg-blue-50 rounded-lg">
                                        <h4 class="font-semibold text-blue-800 mb-2">Migration Benefits:</h4>
                                        <ul class="text-sm text-blue-700 space-y-1">
                                                <li>‚úÖ Keep all your Flask business logic and database models</li>
                                                <li>‚úÖ Add modern frontend features (hot reload, component-based UI)</li>
                                                <li>‚úÖ Deploy frontend and backend independently</li>
                                                <li>‚úÖ Better performance with static-first rendering</li>
                                                <li>‚úÖ Use any UI framework (React, Vue, Svelte) within the same project</li>
                                        </ul>
                                </div>
                        </div>

                </div>
        </section>
</Layout>