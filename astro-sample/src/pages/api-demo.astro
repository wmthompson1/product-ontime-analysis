---
import Layout from '../layouts/Layout.astro';
---

<Layout title="API Integration Examples">
	<section class="py-16">
		<div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
			<h2 class="text-3xl font-bold text-center mb-8">Real API Integration Examples</h2>
			<p class="text-center text-gray-600 mb-12">
				See how Astro seamlessly integrates with your existing Flask backend through real API calls.
			</p>

			<div class="grid lg:grid-cols-2 gap-8">
				
				<!-- Server-Side API Call -->
				<div class="bg-white rounded-lg shadow-lg p-6">
					<h3 class="text-xl font-semibold mb-4 text-blue-600">Server-Side Integration</h3>
					<p class="text-gray-600 mb-4">Astro can fetch data from your Flask API during build time or server rendering.</p>
					
					<div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
						<pre><code>---
// In your .astro file
const response = await fetch('http://localhost:5000/api/users');
const users = await response.json();
---

&lt;div&gt;
  &#123;users.map(user =&gt; (
    &lt;div key=&#123;user.id&#125;&gt;
      &lt;h3&gt;&#123;user.name&#125;&lt;/h3&gt;
      &lt;p&gt;&#123;user.email&#125;&lt;/p&gt;
    &lt;/div&gt;
  ))&#125;
&lt;/div&gt;</code></pre>
					</div>
					
					<div class="mt-4 p-3 bg-blue-50 rounded">
						<h4 class="font-semibold text-blue-800">Benefits:</h4>
						<ul class="text-sm text-blue-700 mt-1 space-y-1">
							<li>• Data fetched at build time</li>
							<li>• No client-side JavaScript needed</li>
							<li>• Excellent SEO and performance</li>
							<li>• Works with static hosting</li>
						</ul>
					</div>
				</div>

				<!-- Client-Side API Call -->
				<div class="bg-white rounded-lg shadow-lg p-6">
					<h3 class="text-xl font-semibold mb-4 text-purple-600">Client-Side Integration</h3>
					<p class="text-gray-600 mb-4">For dynamic interactions, use React components with your Flask API.</p>
					
					<div class="bg-gray-800 text-green-400 p-4 rounded text-sm overflow-x-auto">
						<pre><code>// React component for dynamic data
function UserList() &#123;
  const [users, setUsers] = useState([]);
  const [loading, setLoading] = useState(false);
  
  const fetchUsers = async () =&gt; &#123;
    setLoading(true);
    const response = await fetch('/api/users');
    const data = await response.json();
    setUsers(data);
    setLoading(false);
  &#125;;
  
  return (
    &lt;div&gt;
      &lt;button onClick=&#123;fetchUsers&#125;&gt;
        &#123;loading ? 'Loading...' : 'Load Users'&#125;
      &lt;/button&gt;
      &#123;users.map(user =&gt; (
        &lt;UserCard key=&#123;user.id&#125; user=&#123;user&#125; /&gt;
      ))&#125;
    &lt;/div&gt;
  );
&#125;</code></pre>
					</div>
					
					<div class="mt-4 p-3 bg-purple-50 rounded">
						<h4 class="font-semibold text-purple-800">Benefits:</h4>
						<ul class="text-sm text-purple-700 mt-1 space-y-1">
							<li>• Real-time user interactions</li>
							<li>• Progressive enhancement</li>
							<li>• Handles loading and error states</li>
							<li>• Works with complex UI patterns</li>
						</ul>
					</div>
				</div>
			</div>

			<!-- Migration Guide -->
			<div class="mt-16 bg-gradient-to-r from-green-50 to-blue-50 rounded-lg p-8">
				<h3 class="text-2xl font-bold mb-6 text-center">Migration from Flask Templates</h3>
				
				<div class="grid md:grid-cols-2 gap-8">
					<div>
						<h4 class="text-lg font-semibold mb-4 text-green-700">Before (Flask Only)</h4>
						<div class="bg-gray-800 text-green-400 p-4 rounded text-sm">
							<pre><code>@app.route('/users')
def users():
    users = User.query.all()
    return render_template('users.html', users=users)

&lt;!-- users.html --&gt;
&#123;% for user in users %&#125;
  &lt;div class="user-card"&gt;
    &lt;h3&gt;&#123;&#123; user.name &#125;&#125;&lt;/h3&gt;
    &lt;p&gt;&#123;&#123; user.email &#125;&#125;&lt;/p&gt;
  &lt;/div&gt;
&#123;% endfor %&#125;</code></pre>
						</div>
					</div>
					
					<div>
						<h4 class="text-lg font-semibold mb-4 text-blue-700">After (Flask + Astro)</h4>
						<div class="bg-gray-800 text-green-400 p-4 rounded text-sm">
							<pre><code>// Flask API endpoint
@app.route('/api/users')
def api_users():
    users = User.query.all()
    return jsonify([user.to_dict() for user in users])

// Astro component
---
const response = await fetch('http://localhost:5000/api/users');
const users = await response.json();
---

&#123;users.map(user =&gt; (
  &lt;div class="user-card"&gt;
    &lt;h3&gt;&#123;user.name&#125;&lt;/h3&gt;
    &lt;p&gt;&#123;user.email&#125;&lt;/p&gt;
  &lt;/div&gt;
))&#125;</code></pre>
						</div>
					</div>
				</div>
				
				<div class="mt-6 text-center">
					<p class="text-gray-600">
						Keep your Flask backend for business logic and data processing, 
						while Astro handles the modern frontend experience.
					</p>
				</div>
			</div>
		</div>
	</section>
</Layout>